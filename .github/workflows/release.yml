name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm typecheck

      - name: Run tests
        run: pnpm test

      - name: Build extension
        run: pnpm build

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Package extension
        run: pnpm pack

      - name: Install changelog generator
        run: npm install -g conventional-changelog-cli

      - name: Update CHANGELOG.md
        run: |
          # 生成新的changelog条目
          conventional-changelog -p angular -i CHANGELOG.md -s

      - name: Commit updated changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git diff --staged --quiet || git commit -m "docs: update CHANGELOG.md for ${{ steps.version.outputs.version }}"
          git push origin HEAD:main

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: GetAllPages ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 GetAllPages ${{ steps.version.outputs.version }}

            ### 📦 安装方式

            1. 下载对应的扩展包：
               - **Chrome/Edge**: 下载 `extension.zip` 文件
               - **Firefox**: 下载 `extension.xpi` 文件

            2. 在浏览器中安装：
               - **Chrome/Edge**: 解压zip文件，在扩展管理页面选择"加载已解压的扩展程序"
               - **Firefox**: 直接安装xpi文件

            ### 🔧 使用方法

            1. 访问目标文档网站
            2. 点击插件图标
            3. 点击"🔍 智能分析"按钮
            4. 等待分析完成，自动下载markdown文件

            ---

            **完整更新日志请查看 [CHANGELOG.md](CHANGELOG.md)**
          draft: false
          prerelease: false

      - name: Upload Chrome Extension (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./extension.zip
          asset_name: extension.zip
          asset_content_type: application/zip

      - name: Upload Firefox Extension (XPI)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./extension.xpi
          asset_name: extension.xpi
          asset_content_type: application/x-xpinstall

      - name: Upload Chrome Extension (CRX)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./extension.crx
          asset_name: extension.crx
          asset_content_type: application/x-chrome-extension
